# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.cyclone_forecast_response import CycloneForecastResponse
from ..types.feature_collection import FeatureCollection
from ..types.model_name import ModelName
from .forecasts.client import AsyncForecastsClient, ForecastsClient
from .raw_client import AsyncRawCyclonesClient, RawCyclonesClient


class CyclonesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCyclonesClient(client_wrapper=client_wrapper)
        self.forecasts = ForecastsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCyclonesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCyclonesClient
        """
        return self._raw_client

    def query_forecasts(
        self,
        *,
        time: typing.Optional[dt.datetime] = None,
        min_storm_category: typing.Optional[int] = None,
        model: typing.Optional[ModelName] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[CycloneForecastResponse]:
        """
        Query the available cyclone forecasts for a particular time

        Parameters
        ----------
        time : typing.Optional[dt.datetime]
            *Default value: (current time) - Default time zone: UTC*

        min_storm_category : typing.Optional[int]

        model : typing.Optional[ModelName]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CycloneForecastResponse]
            Successful Response

        Examples
        --------
        from silurian import Earth
        client = Earth(api_key="YOUR_API_KEY", )
        client.cyclones.query_forecasts()
        """
        _response = self._raw_client.query_forecasts(
            time=time, min_storm_category=min_storm_category, model=model, request_options=request_options
        )
        return _response.data

    def get_forecast_track(
        self,
        storm_id: str,
        *,
        time: typing.Optional[dt.datetime] = None,
        max_lead_time: typing.Optional[str] = None,
        model: typing.Optional[ModelName] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FeatureCollection:
        """
        Get cyclone tracks in GeoJSON (MF-GeoJSON) format

        Parameters
        ----------
        storm_id : str

        time : typing.Optional[dt.datetime]
            *Default value: (current time) - Default time zone: UTC*

        max_lead_time : typing.Optional[str]
            *Value must be > P0D*

        model : typing.Optional[ModelName]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FeatureCollection
            Successful Response

        Examples
        --------
        from silurian import Earth
        client = Earth(api_key="YOUR_API_KEY", )
        client.cyclones.get_forecast_track(storm_id='storm_id', )
        """
        _response = self._raw_client.get_forecast_track(
            storm_id, time=time, max_lead_time=max_lead_time, model=model, request_options=request_options
        )
        return _response.data

    def get_forecast_cone(
        self,
        storm_id: str,
        *,
        time: typing.Optional[dt.datetime] = None,
        max_lead_time: typing.Optional[str] = None,
        smooth_cone: typing.Optional[bool] = None,
        model: typing.Optional[ModelName] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FeatureCollection:
        """
        Get cyclone forecast cone in GeoJSON format

        Parameters
        ----------
        storm_id : str

        time : typing.Optional[dt.datetime]
            *Default value: (current time) - Default time zone: UTC*

        max_lead_time : typing.Optional[str]
            *Value must be > P0D*

        smooth_cone : typing.Optional[bool]

        model : typing.Optional[ModelName]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FeatureCollection
            Successful Response

        Examples
        --------
        from silurian import Earth
        client = Earth(api_key="YOUR_API_KEY", )
        client.cyclones.get_forecast_cone(storm_id='storm_id', )
        """
        _response = self._raw_client.get_forecast_cone(
            storm_id,
            time=time,
            max_lead_time=max_lead_time,
            smooth_cone=smooth_cone,
            model=model,
            request_options=request_options,
        )
        return _response.data


class AsyncCyclonesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCyclonesClient(client_wrapper=client_wrapper)
        self.forecasts = AsyncForecastsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCyclonesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCyclonesClient
        """
        return self._raw_client

    async def query_forecasts(
        self,
        *,
        time: typing.Optional[dt.datetime] = None,
        min_storm_category: typing.Optional[int] = None,
        model: typing.Optional[ModelName] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[CycloneForecastResponse]:
        """
        Query the available cyclone forecasts for a particular time

        Parameters
        ----------
        time : typing.Optional[dt.datetime]
            *Default value: (current time) - Default time zone: UTC*

        min_storm_category : typing.Optional[int]

        model : typing.Optional[ModelName]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[CycloneForecastResponse]
            Successful Response

        Examples
        --------
        from silurian import AsyncEarth
        import asyncio
        client = AsyncEarth(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.cyclones.query_forecasts()
        asyncio.run(main())
        """
        _response = await self._raw_client.query_forecasts(
            time=time, min_storm_category=min_storm_category, model=model, request_options=request_options
        )
        return _response.data

    async def get_forecast_track(
        self,
        storm_id: str,
        *,
        time: typing.Optional[dt.datetime] = None,
        max_lead_time: typing.Optional[str] = None,
        model: typing.Optional[ModelName] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FeatureCollection:
        """
        Get cyclone tracks in GeoJSON (MF-GeoJSON) format

        Parameters
        ----------
        storm_id : str

        time : typing.Optional[dt.datetime]
            *Default value: (current time) - Default time zone: UTC*

        max_lead_time : typing.Optional[str]
            *Value must be > P0D*

        model : typing.Optional[ModelName]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FeatureCollection
            Successful Response

        Examples
        --------
        from silurian import AsyncEarth
        import asyncio
        client = AsyncEarth(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.cyclones.get_forecast_track(storm_id='storm_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_forecast_track(
            storm_id, time=time, max_lead_time=max_lead_time, model=model, request_options=request_options
        )
        return _response.data

    async def get_forecast_cone(
        self,
        storm_id: str,
        *,
        time: typing.Optional[dt.datetime] = None,
        max_lead_time: typing.Optional[str] = None,
        smooth_cone: typing.Optional[bool] = None,
        model: typing.Optional[ModelName] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FeatureCollection:
        """
        Get cyclone forecast cone in GeoJSON format

        Parameters
        ----------
        storm_id : str

        time : typing.Optional[dt.datetime]
            *Default value: (current time) - Default time zone: UTC*

        max_lead_time : typing.Optional[str]
            *Value must be > P0D*

        smooth_cone : typing.Optional[bool]

        model : typing.Optional[ModelName]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FeatureCollection
            Successful Response

        Examples
        --------
        from silurian import AsyncEarth
        import asyncio
        client = AsyncEarth(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.cyclones.get_forecast_cone(storm_id='storm_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_forecast_cone(
            storm_id,
            time=time,
            max_lead_time=max_lead_time,
            smooth_cone=smooth_cone,
            model=model,
            request_options=request_options,
        )
        return _response.data
